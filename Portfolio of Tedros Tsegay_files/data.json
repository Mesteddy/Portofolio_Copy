{
	"software-section": [
		{
			"img-src": "./assets/images/software/java-logo.png",
			"bg-position": "0% 0%",
			"img-title": "Java Logo",
			"card-text": "Java",
			"data-target": "#javamodal",
			"modal-id": "javamodal",
			"modal-title": "Java Experience",
			"modal-body": "Object-oriented programming in Java, including command line (CLI) applications, database applications, simple algorithms, and API adapters."
		},
		{
			"img-src": "./assets/images/software/Csharp_Logo.png",
			"bg-position": "17% 0%",
			"img-title": ".NET Logo",
			"card-text": ".NET / C#",
			"data-target": "#netmodal",
			"modal-id": "netmodal",
			"modal-title": ".NET / C# Experience",
			"modal-body": "Object-oriented programming experience in C#, with a focus on cloud, cloud-hybrid, and cloud-interfacing applications with Amazon Web Services. Some of these applications are featured in my Software Portfolio section."
		},
		{
			"img-src": "./assets/images/software/cplus-logo.png",
			"bg-position": "34% 0%",
			"img-title": "C++ Logo",
			"card-text": "C++",
			"data-target": "#cplusmodal",
			"modal-id": "cplusmodal",
			"modal-title": "C++ Experience",
			"modal-body": "Object-oriented programming experience in C++. My data structures course was instructed in C++"
		},
		{
			"img-src": "./assets/images/software/python-logo.png",
			"bg-position": "51% 0%",
			"img-title": "Python Logo",
			"card-text": "Python",
			"data-target": "#pythonmodal",
			"modal-id": "pythonmodal",
			"modal-title": "Python Experience",
			"modal-body": "Machine learning, statistics, data science, and simple scripting tools using Python."
		},
		{
			"img-src": "./assets/images/software/n-react-logo.png",
			"bg-position": "0% 30%",
			"img-title": "React Logo",
			"card-text": "React",
			"data-target": "#reactmodal",
			"modal-id": "reactmodal",
			"modal-title": "React Experience",
			"modal-body": "Web application development with React, including components, hooks, and state management. The front end of NCRP was built using React, as well as my simple Robofriends website project."
		},
		{
			"img-src": "./assets/images/software/react-native-logo.png",
			"bg-position": "17% 30%",
			"img-title": "React Native Logo",
			"card-text": "React Native",
			"data-target": "#reactnativemodal",
			"modal-id": "reactnativemodal",
			"modal-title": "React Experience",
			"modal-body": "Basic cross-platform Android/iOS app development using React Native, including my simple Focus Time app."
		},
		{
			"img-src": "./assets/images/software/JavaScript-logo.png",
			"bg-position": "34% 30%",
			"img-title": "JS Logo",
			"card-text": "JavaScript",
			"data-target": "#jsmodal",
			"modal-id": "jsmodal",
			"modal-title": "JavaScript Experience",
			"modal-body": "JavaScript experience mainly constrained to web applications (including this website), React, and React Native applications, including Node.js for package management, version management, and dependency management."
		},
	
		{
			"img-src": "./assets/images/software/cloud-computing-white.png",
			"bg-position": "17% 60%",
			"img-title": "Cloud Logo",
			"card-text": "Cloud Computing",
			"data-target": "#cloudmodal",
			"modal-id": "cloudmodal",
			"modal-title": "Cloud Computing Experience",
			"modal-body": "Cloud, cloud-hybrid, and cloud-interfacing applications using .NET/C# with Amazon Web Services, as well as technologies such as Kubernetes for modular and scalable cloud-based distributed applications. Some of the Amazon Web Services utilized include S3, EC2, Lambda, Simple Queue Service, Simple Notification Service, Rekognition, Textract, Translate, Cloud Watch, Database Services (RDS, NoSQL), Event Bridge, Amplify, etc."
		},
		{
			"img-src": "./assets/images/software/htmlcss-logo.png",
			"bg-position": "34% 60%",
			"img-title": "HTML/CSS Logo",
			"card-text": "HTML / CSS",
			"data-target": "#htmlcssmodal",
			"modal-id": "htmlcssmodal",
			"modal-title": "HTML / CSS Experience",
			"modal-body": "I built this website! Bootstrap elements were utilized for modularity, many of which were populated using JavaScript and data stored in JSON. CSS was utilized for styling and for responsive design which helps adjust and scale components for different screen sizes."
		},
		{
			"img-src": "./assets/images/software/machine-learning-logo.png",
			"bg-position": "51% 60%",
			"img-title": "ML Logo",
			"card-text": "Machine Learning",
			"data-target": "#mlmodal",
			"modal-id": "mlmodal",
			"modal-title": "Machine Learning Experience",
			"modal-body": "Machine learning algorithms such as the ID3 decision tree and artificial neural network algorithms written in Python, as well as the utilization of cloud-based machine learning packages such as AWS Rekognition and Tensorflow."
		},
		{
			"img-src": "./assets/images/software/aws-light-logo.png",
			"bg-position": "0% 90%",
			"img-title": "AWS Logo",
			"card-text": "AWS",
			"data-target": "#awsmodal",
			"modal-id": "awsmodal",
			"modal-title": "AWS Experience",
			"modal-body": "Amazon Web Services utilized include S3, EC2, Lambda, Simple Queue Service, Simple Notification Service, Rekognition, Textract, Translate, Cloud Watch, Database Services (RDS, NoSQL), Event Bridge, Amplify, etc."
		},
		{
			"img-src": "./assets/images/software/cicd-logo.png",
			"bg-position": "51% 90%",
			"img-title": "CI/CD Logo",
			"card-text": "CI/CD",
			"data-target": "#cicdmodal",
			"modal-id": "cicdmodal",
			"modal-title": "CI/CD Experience",
			"modal-body": "Continuous implementation/continuous deployment through AWS Amplify. This website is deployed through Amplify which greatly simplifies deployment of the web application, and builds/updates the deployment any time the GitHub repository is updated."
		},
		{
			"img-src": "./assets/images/software/database-centered-logo.png",
			"bg-position": "17% 90%",
			"img-title": "Databases Logo",
			"card-text": "Database Systems",
			"data-target": "#dbmodal",
			"modal-id": "dbmodal",
			"modal-title": "Database Systems Experience",
			"modal-body": "Database management and application development with relational database technologies such as MySQL and PostgreSQL, and NoSQL database technologies such as MongoDB and AWS DynamoDB."
		},
		{
			"img-src": "./assets/images/software/iot-logo.png",
			"bg-position": "34% 90%",
			"img-title": "IOT Logo",
			"card-text": "IoT Devices",
			"data-target": "#iotmodal",
			"modal-id": "iotmodal",
			"modal-title": "IoT Device Experience",
			"modal-body": "Arduino, Raspberry Pi, and various sensors and modules that interact with these devices such as ESP32 and NodeMCU development boards, LEDs, motor controllers, etc."
		}
	],
	"portfolio-section": [
		{
			"card-title": "Artificial Neural Network - MNIST",
			"img-src": "./assets/images/portfolio/mnist.png",
			"highlight": true,
			"badges": [
				"python",
				"jupyter",
				"ml"
			],
			"db-tech": "",
			"card-text": "This project is an exploration of artificial neural networks using the small batch backpropagation algorithm. Each image in the MNIST dataset is broken down into a 1 x 784 array (28x28 pixels) which is fed into the input layer of the newtork. The output of the network is the predicted digit that matches the handwritten input.",
			"github-link": "https://github.com/kylewhite0225/ann-mnist"
		},
		{
			"card-title": "Cloud Vaccine Information Database",
			"img-src": "./assets/images/portfolio/aws-cloud.png",
			"highlight": true,
			"badges": [
				"csharp",
				"aws",
				"cloud",
				"db"
			],
			"db-tech": "PostgreSQL",
			"card-text": "This project includes a utility for uploading XML/JSON objects to Amazon S3, triggering a serverless AWS Lambda function to parse the file, which then formulates a query and stores the information in an AWS RDS PostgreSQL instance.",
			"github-link": "https://github.com/ttsega06/cloud-compute-vax-lambda"
		},
		{
			"card-title": "Cloud/Local Hybrid Ticket Generator",
			"img-src": "./assets/images/portfolio/aws-cloud.png",
			"highlight": true,
			"badges": [
				"csharp",
				"aws",
				"cloud",
				"ml"
			],
			"db-tech": "",
			"card-text": "This project includes a utility for uploading license plate images to Amazon S3, triggering a serverless AWS Lambda function which scans the plate using AWS Textract machine learning service. A JSON message is placed in an AWS SQS downward queue containing the plate number and violation. A Windows service polls the queue, then responds with vehicle owner information in an upward queue. A second Lambda function translates a message using AWS Translate and sends it to the fictional vehicle owner via AWS SNS.",
			"github-link": "https://github.com/ttsega06/Cloud-license-reader"
		},
		{
			"card-title": "Cloud/Local Hybrid Patient Database",
			"img-src": "./assets/images/portfolio/aws-cloud.png",
			"highlight": true,
			"badges": [
				"csharp",
				"aws",
				"cloud"
			],
			"db-tech": "",
			"card-text": "This project includes a utility for uploading XML objects to Amazon S3, triggering a serverless AWS Lambda function which places a JSON message in an AWS SQS downward queue which is being monitored by a Windows service. This service responds with patient information in an upward queue is printed to Cloudwatch by a second Lambda function.",
			"github-link": "https://github.com/ttsega06/cloud-hybrid-patient-db"
		},
		{
			"card-title": "ID3 - Decision Tree Algorithm",
			"img-src": "./assets/images/portfolio/decision-tree.png",
			"highlight": true,
			"badges": [
				"python",
				"jupyter",
				"ml"
			],
			"db-tech": "",
			"card-text": "This project is an implementation of the ID3 Decision Tree Algorithm written in Python. Several helper functions were created for gathering entropy and information gain, choosing the best features of a dataset (based on information gain), returning a prediction from the model, etc. A 30000 row dataframe of US Census data was used for training and testing.",
			"github-link": "https://github.com/ttsega06/ttsega06-CS351-Monitoring-and-Alarm-System/tree/main"
		},

		{
			"card-title": "IMDB Movie Database",
			"img-src": "./assets/images/software/java-logo.png",
			"highlight": false,
			"badges": [
				"java"
			],
			"db-tech": "",
			"card-text": "This project implements a movie database by reading from a CSV into an array, which is then loaded into a hash table of red-black trees. Each red-black tree provides different search functionality: by year, IMDB score, language, and content rating. The application prints out information for all of the movies in a search result set.",
			"github-link": "https://github.com/ttsega06/movie-database/tree/main"
		},
		{
			"card-title": "Convex Hull Builder",
			"img-src": "./assets/images/software/java-logo.png",
			"highlight": false,
			"badges": [
				"java"
			],
			"db-tech": "",
			"card-text": "A convex hull is a series of line segments that surround a cluster of points, which is constructed in this program by use of an algorithm called Graham Scan.",
			"github-link": "https://github.com/ttsega06/convex_hull/tree/main"
		},
		{
			"card-title": "Basic Unix Shell",
			"img-src": "./assets/images/software/c-logo.png",
			"highlight": false,
			"badges": [
				"c"
			],
			"db-tech": "",
			"card-text": "This is a basic unix shell with three built in commands: cd (change directory), pwd (print working directory), and exit. External commands are handled by a function that tokenizes the input, creates a child using fork(), passes the arguments to the child using execvp, and then waits for the child to terminate.",
			"github-link": "https://github.com/ttsega06/Unix_Shell/tree/main"
		},
		{
			"card-title": "Concurrency Webserver",
			"img-src": "./assets/images/software/c-logo.png",
			"highlight": false,
			"badges": [
				"c"
			],
			"db-tech": "",
			"card-text": "The goal of this project was to take a single-threaded web server and convert it into a multi-threaded web server using a producer thread, buffer, consumer threads, locks, and condition variable signaling.",
			"github-link": "https://github.com/ttsega06/concurrency-webserver/tree/main"
		}
	]	
}